{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jeffreynaef/go/src/github.com/n3wscott/sockeye/frontend/src/Injection.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Select from \"@material-ui/core/Select\";\nimport { MenuItem, TextField, TableRow, FormControl, Button, TableBody } from \"@material-ui/core\";\nimport { TextArea } from \"grommet\";\n\nconst axios = require(\"axios\");\n\nexport default function Injection(props) {\n  _s();\n\n  const destinations = props.destinations;\n  const dest = props.destination;\n  const [id, setID] = React.useState(\"0123211\");\n  const [type, setType] = React.useState(\"test.type\");\n  const [source, setSource] = React.useState(\"test.source\");\n  const [contenttype, setContenttype] = React.useState(\"application/json\");\n  const [data, setData] = React.useState('{\"test\":\"data\"}');\n  const [destination, setDestination] = React.useState(dest);\n  const divStyle = {\n    width: \"380px\"\n  };\n  const corsOptions = {\n    origin: \"*\"\n  };\n  const useToolbarStyles = makeStyles(theme => ({\n    root: {\n      paddingLeft: theme.spacing(0),\n      paddingRight: theme.spacing(1)\n    },\n    highlight: theme.palette.type === \"light\" ? {\n      color: theme.palette.secondary.main,\n      backgroundColor: lighten(theme.palette.secondary.light, 0.85)\n    } : {\n      color: theme.palette.text.primary,\n      backgroundColor: theme.palette.secondary.dark\n    },\n    title: {\n      flex: \"1 1 100%\",\n      paddingLeft: 8\n    }\n  }));\n  const classes = useToolbarStyles();\n\n  const handleInjection = event => {\n    axios.post(\"/inject\", {\n      destination,\n      data,\n      headers: {\n        \"Ce-Id\": id,\n        \"Ce-Specversion\": \"1.0\",\n        \"Ce-Type\": type,\n        \"Ce-Source\": source,\n        \"Content-Type\": contenttype\n      }\n    }, corsOptions).then(function (response) {\n      console.log(response);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(TableBody, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      className: classes.title,\n      variant: \"h6\",\n      id: \"tableTitle\",\n      component: \"div\",\n      children: \"Injection\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), \"ID:\", /*#__PURE__*/_jsxDEV(TableRow, {\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        style: divStyle,\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"input-injection-ceid\",\n          value: id,\n          onChange: e => setID(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), \"Type:\", /*#__PURE__*/_jsxDEV(TableRow, {\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        style: divStyle,\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"input-injection-type\",\n          value: type,\n          onChange: e => setType(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), \"Source:\", /*#__PURE__*/_jsxDEV(TableRow, {\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        style: divStyle,\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"input-injection-source\",\n          value: source,\n          onChange: e => setSource(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), \"Content-Type:\", /*#__PURE__*/_jsxDEV(TableRow, {\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        style: divStyle,\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"input-injection-contenttype\",\n          value: contenttype,\n          onChange: e => setContenttype(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), \"Avalible Destinations:\", /*#__PURE__*/_jsxDEV(TableRow, {\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        style: divStyle,\n        children: /*#__PURE__*/_jsxDEV(Select // value={destination}\n        , {\n          onChange: e => setDestination(e.target.value),\n          children: destinations.map((data, index) => /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: data,\n            children: data\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), \"Custom Destination:\", /*#__PURE__*/_jsxDEV(TableRow, {\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        style: divStyle,\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"input-injection-add\" // value={destination}\n          ,\n          onChange: e => setDestination(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), \"Data:\", /*#__PURE__*/_jsxDEV(TableRow, {\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        style: divStyle,\n        children: /*#__PURE__*/_jsxDEV(TextArea, {\n          id: \"input-injection-data\",\n          value: data,\n          onChange: e => setData(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableRow, {\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        style: divStyle,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          id: \"input-injection-button\",\n          label: \"Submit\",\n          onClick: handleInjection,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Injection, \"iewgBZ3BhQvlayhQxUllKLpMJZQ=\", true);\n\n_c = Injection;\n\nvar _c;\n\n$RefreshReg$(_c, \"Injection\");","map":{"version":3,"sources":["/Users/jeffreynaef/go/src/github.com/n3wscott/sockeye/frontend/src/Injection.js"],"names":["React","lighten","makeStyles","Typography","Select","MenuItem","TextField","TableRow","FormControl","Button","TableBody","TextArea","axios","require","Injection","props","destinations","dest","destination","id","setID","useState","type","setType","source","setSource","contenttype","setContenttype","data","setData","setDestination","divStyle","width","corsOptions","origin","useToolbarStyles","theme","root","paddingLeft","spacing","paddingRight","highlight","palette","color","secondary","main","backgroundColor","light","text","primary","dark","title","flex","classes","handleInjection","event","post","headers","then","response","console","log","catch","error","e","target","value","map","index"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Select from \"@material-ui/core/Select\";\nimport {MenuItem,TextField,TableRow,FormControl,Button, TableBody} from \"@material-ui/core\";\nimport { TextArea } from \"grommet\";\nconst axios = require(\"axios\");\n\n\nexport default function Injection(props) {\n  const destinations = props.destinations;\n  const dest = props.destination;\n\n  const [id, setID] = React.useState(\"0123211\");\n  const [type, setType] = React.useState(\"test.type\");\n  const [source, setSource] = React.useState(\"test.source\");\n  const [contenttype, setContenttype] = React.useState(\"application/json\");\n  const [data, setData] = React.useState('{\"test\":\"data\"}');\n  const [destination, setDestination] = React.useState(dest);\n\n  const divStyle = {\n    width: \"380px\",\n  };\n\n  const corsOptions = {\n    origin: \"*\",\n  };\n\n  const useToolbarStyles = makeStyles((theme) => ({\n    root: {\n      paddingLeft: theme.spacing(0),\n      paddingRight: theme.spacing(1),\n    },\n    highlight:\n      theme.palette.type === \"light\"\n        ? {\n          color: theme.palette.secondary.main,\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n        }\n        : {\n          color: theme.palette.text.primary,\n          backgroundColor: theme.palette.secondary.dark,\n        },\n    title: {\n      flex: \"1 1 100%\",\n      paddingLeft: 8,\n    },\n  }));\n\n  const classes = useToolbarStyles();\n\n\n  const handleInjection = (event) => {\n    axios\n      .post(\n        \"/inject\",\n        {\n          destination,\n          data,\n          headers: {\n            \"Ce-Id\": id,\n            \"Ce-Specversion\": \"1.0\",\n            \"Ce-Type\": type,\n            \"Ce-Source\": source,\n            \"Content-Type\": contenttype,\n          },\n        },\n        corsOptions\n      )\n      .then(function (response) {\n        console.log(response);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  };\n\n  return (\n    <TableBody>\n      <Typography\n        className={classes.title}\n        variant=\"h6\"\n        id=\"tableTitle\"\n        component=\"div\"\n      >\n        Injection\n      </Typography>\n      ID:\n      <TableRow>\n        <FormControl style={divStyle}>\n          <TextField\n            id=\"input-injection-ceid\"\n            value={id}\n            onChange={(e) => setID(e.target.value)}\n          />\n        </FormControl>\n      </TableRow>\n      Type:\n      <TableRow>\n        <FormControl style={divStyle}>\n          <TextField\n            id=\"input-injection-type\"\n            value={type}\n            onChange={(e) => setType(e.target.value)}\n          />\n        </FormControl>\n      </TableRow>\n      Source:\n      <TableRow>\n        <FormControl style={divStyle}>\n          <TextField\n            id=\"input-injection-source\"\n            value={source}\n            onChange={(e) => setSource(e.target.value)}\n          />\n        </FormControl>\n      </TableRow>\n      Content-Type:\n      <TableRow>\n        <FormControl style={divStyle}>\n          <TextField\n            id=\"input-injection-contenttype\"\n            value={contenttype}\n            onChange={(e) => setContenttype(e.target.value)}\n          />\n        </FormControl>\n      </TableRow>\n      Avalible Destinations:\n      <TableRow>\n        <FormControl style={divStyle}>\n          <Select\n            // value={destination}\n            onChange={(e) => setDestination(e.target.value)}\n          >\n            {destinations.map((data, index) => (\n              <MenuItem value={data}>{data}</MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n      </TableRow>\n      Custom Destination:\n      <TableRow>\n        <FormControl style={divStyle}>\n          <TextField\n            id=\"input-injection-add\"\n            // value={destination}\n            onChange={(e) => setDestination(e.target.value)}\n          />\n        </FormControl>\n      </TableRow>\n      Data:\n      <TableRow>\n        <FormControl style={divStyle}>\n          <TextArea\n            id=\"input-injection-data\"\n            value={data}\n            onChange={(e) => setData(e.target.value)}\n          />\n        </FormControl>\n      </TableRow>\n      <TableRow>\n        <FormControl style={divStyle}>\n          <Button\n            id=\"input-injection-button\"\n            label=\"Submit\"\n            onClick={handleInjection}\n          >\n            Send\n          </Button>\n        </FormControl>\n      </TableRow>\n    </TableBody>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}