{"ast":null,"code":"import React from\"react\";import{withStyles,makeStyles}from\"@material-ui/core/styles\";import TextField from\"@material-ui/core/TextField\";import Chip from\"@material-ui/core/Chip\";import Avatar from\"@material-ui/core/Avatar\";var CssTextField=withStyles({root:{\"& label\":{color:\"green\"},\"& .MuiInput-underline:before\":{borderBottomColor:\"lightgray\"},\"& .MuiInputBase-input\":{padding:0,width:\"100%\"}}})(TextField);var useStyles=makeStyles(function(theme){return{root:{display:\"flex\",flexWrap:\"wrap\"},margin:{padding:0,margin:4},list:{\"list-style-type\":\"none\",\"padding-inline-start\":0,\"width\":\"100%\"}};});export default function CustomizedInputs(props){var classes=useStyles();var rows=[];var specVersion=\"??\";var dataContentType=\"unknown\";Object.keys(props.item).forEach(function(key){if(key===\"data\"||key===\"data_base64\"||key===\"key\"){return;}if(key===\"specversion\"){specVersion=props.item[key];return;}if(key===\"datacontenttype\"){dataContentType=props.item[key];return;}rows.push({\"key\":key,\"value\":props.item[key]});});rows.sort(function(a,b){if(a.key<b.key){return-1;}if(a.key>b.key){return 1;}// a must be equal to b\nreturn 0;});return/*#__PURE__*/React.createElement(\"form\",{className:classes.root,noValidate:true},/*#__PURE__*/React.createElement(\"ul\",{className:classes.list},/*#__PURE__*/React.createElement(\"li\",null,/*#__PURE__*/React.createElement(Chip,{variant:\"outlined\",color:\"lightgray\",size:\"small\",avatar:/*#__PURE__*/React.createElement(Avatar,null,specVersion),label:dataContentType})),rows.map(function(row){return/*#__PURE__*/React.createElement(\"li\",null,/*#__PURE__*/React.createElement(CssTextField,{fullWidth:true,className:classes.margin,value:row.value,label:row.key}));})));}","map":{"version":3,"sources":["/Users/jeffreynaef/go/src/github.com/n3wscott/sockeye/frontend/src/Attributes.js"],"names":["React","withStyles","makeStyles","TextField","Chip","Avatar","CssTextField","root","color","borderBottomColor","padding","width","useStyles","theme","display","flexWrap","margin","list","CustomizedInputs","props","classes","rows","specVersion","dataContentType","Object","keys","item","forEach","key","push","sort","a","b","map","row","value"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  withStyles,\n  makeStyles,\n} from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Chip from \"@material-ui/core/Chip\";\nimport Avatar from \"@material-ui/core/Avatar\";\n\nconst CssTextField = withStyles({\n  root: {\n    \"& label\": {\n      color: \"green\"\n    },\n    \"& .MuiInput-underline:before\": {\n      borderBottomColor: \"lightgray\"\n    },\n    \"& .MuiInputBase-input\": {\n      padding: 0,\n      width: \"100%\"\n    }\n  }\n})(TextField);\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n  },\n  margin: {\n    padding: 0,\n    margin: 4\n  },\n  list: {\n    \"list-style-type\": \"none\",\n    \"padding-inline-start\": 0,\n    \"width\": \"100%\",\n  }\n}));\n\nexport default function CustomizedInputs(props) {\n  const classes = useStyles();\n\n  let rows = [];\n\n  let specVersion = \"??\";\n  let dataContentType = \"unknown\";\n\n  Object.keys(props.item).forEach(key => {\n    if (key === \"data\" || key === \"data_base64\" || key === \"key\") {\n      return;\n    }\n    if (key === \"specversion\") {\n      specVersion = props.item[key];\n      return\n    }\n    if (key === \"datacontenttype\") {\n      dataContentType = props.item[key];\n      return\n    }\n    rows.push({\"key\":key, \"value\":props.item[key]});\n  });\n\n  rows.sort(function(a, b) {\n    if (a.key < b.key) {\n      return -1;\n    }\n    if (a.key > b.key) {\n      return 1;\n    }\n    // a must be equal to b\n    return 0;\n  });\n\n  return (\n    <form className={classes.root} noValidate>\n      <ul className={classes.list}>\n        <li>\n          <Chip variant=\"outlined\" color=\"lightgray\" size=\"small\" avatar={<Avatar>{specVersion}</Avatar>} label={dataContentType}/>\n        </li>\n        {rows.map((row) => (\n        <li>\n        <CssTextField fullWidth\n          className={classes.margin}\n          value={row.value}\n          label={row.key}\n        />\n        </li>\n      ))}\n      </ul>\n    </form>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}